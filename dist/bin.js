import { createCommand } from 'commander';
import { createCloudFormationClient, waitForStackToBeReadyForUpdate } from './cloudformation.js';
async function main({ region: rawRegion, stackName }) {
    const region = rawRegion || process.env.AWS_REGION || process.env.AWS_DEFAULT_REGION;
    if (!region) {
        throw new Error('No region specified. Please specify a region with --region or set AWS_REGION or AWS_DEFAULT_REGION in the environment.');
    }
    const cloudFormation = createCloudFormationClient({ region });
    await waitForStackToBeReadyForUpdate({ cloudFormation, stackName });
}
export function createRootCommand() {
    const command = createCommand();
    command
        .name('aws-cloudformation-wait-ready')
        .description('Wait for a CloudFormation stack to be ready for an update/create.')
        .requiredOption('-s, --stack-name <stackName>', 'The name of the stack to wait for.')
        .option('-r, --region <region>', 'The AWS region to use. Defaults to the value of AWS_REGION or AWS_DEFAULT_REGION in the environment.')
        .action(main)
        .showHelpAfterError();
    return command;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2Jpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQzFDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWpHLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBMEM7SUFDMUYsTUFBTSxNQUFNLEdBQUcsU0FBUyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUM7SUFDckYsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNYLE1BQU0sSUFBSSxLQUFLLENBQ2Isd0hBQXdILENBQ3pILENBQUM7S0FDSDtJQUNELE1BQU0sY0FBYyxHQUFHLDBCQUEwQixDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUM5RCxNQUFNLDhCQUE4QixDQUFDLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7QUFDdEUsQ0FBQztBQUVELE1BQU0sVUFBVSxpQkFBaUI7SUFDL0IsTUFBTSxPQUFPLEdBQUcsYUFBYSxFQUFFLENBQUM7SUFDaEMsT0FBTztTQUNKLElBQUksQ0FBQywrQkFBK0IsQ0FBQztTQUNyQyxXQUFXLENBQUMsbUVBQW1FLENBQUM7U0FDaEYsY0FBYyxDQUFDLDhCQUE4QixFQUFFLG9DQUFvQyxDQUFDO1NBQ3BGLE1BQU0sQ0FDTCx1QkFBdUIsRUFDdkIsc0dBQXNHLENBQ3ZHO1NBQ0EsTUFBTSxDQUFDLElBQUksQ0FBQztTQUNaLGtCQUFrQixFQUFFLENBQUM7SUFDeEIsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNvbW1hbmQgfSBmcm9tICdjb21tYW5kZXInO1xuaW1wb3J0IHsgY3JlYXRlQ2xvdWRGb3JtYXRpb25DbGllbnQsIHdhaXRGb3JTdGFja1RvQmVSZWFkeUZvclVwZGF0ZSB9IGZyb20gJy4vY2xvdWRmb3JtYXRpb24uanMnO1xuXG5hc3luYyBmdW5jdGlvbiBtYWluKHsgcmVnaW9uOiByYXdSZWdpb24sIHN0YWNrTmFtZSB9OiB7IHJlZ2lvbj86IHN0cmluZzsgc3RhY2tOYW1lOiBzdHJpbmcgfSkge1xuICBjb25zdCByZWdpb24gPSByYXdSZWdpb24gfHwgcHJvY2Vzcy5lbnYuQVdTX1JFR0lPTiB8fCBwcm9jZXNzLmVudi5BV1NfREVGQVVMVF9SRUdJT047XG4gIGlmICghcmVnaW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ05vIHJlZ2lvbiBzcGVjaWZpZWQuIFBsZWFzZSBzcGVjaWZ5IGEgcmVnaW9uIHdpdGggLS1yZWdpb24gb3Igc2V0IEFXU19SRUdJT04gb3IgQVdTX0RFRkFVTFRfUkVHSU9OIGluIHRoZSBlbnZpcm9ubWVudC4nLFxuICAgICk7XG4gIH1cbiAgY29uc3QgY2xvdWRGb3JtYXRpb24gPSBjcmVhdGVDbG91ZEZvcm1hdGlvbkNsaWVudCh7IHJlZ2lvbiB9KTtcbiAgYXdhaXQgd2FpdEZvclN0YWNrVG9CZVJlYWR5Rm9yVXBkYXRlKHsgY2xvdWRGb3JtYXRpb24sIHN0YWNrTmFtZSB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJvb3RDb21tYW5kKCkge1xuICBjb25zdCBjb21tYW5kID0gY3JlYXRlQ29tbWFuZCgpO1xuICBjb21tYW5kXG4gICAgLm5hbWUoJ2F3cy1jbG91ZGZvcm1hdGlvbi13YWl0LXJlYWR5JylcbiAgICAuZGVzY3JpcHRpb24oJ1dhaXQgZm9yIGEgQ2xvdWRGb3JtYXRpb24gc3RhY2sgdG8gYmUgcmVhZHkgZm9yIGFuIHVwZGF0ZS9jcmVhdGUuJylcbiAgICAucmVxdWlyZWRPcHRpb24oJy1zLCAtLXN0YWNrLW5hbWUgPHN0YWNrTmFtZT4nLCAnVGhlIG5hbWUgb2YgdGhlIHN0YWNrIHRvIHdhaXQgZm9yLicpXG4gICAgLm9wdGlvbihcbiAgICAgICctciwgLS1yZWdpb24gPHJlZ2lvbj4nLFxuICAgICAgJ1RoZSBBV1MgcmVnaW9uIHRvIHVzZS4gRGVmYXVsdHMgdG8gdGhlIHZhbHVlIG9mIEFXU19SRUdJT04gb3IgQVdTX0RFRkFVTFRfUkVHSU9OIGluIHRoZSBlbnZpcm9ubWVudC4nLFxuICAgIClcbiAgICAuYWN0aW9uKG1haW4pXG4gICAgLnNob3dIZWxwQWZ0ZXJFcnJvcigpO1xuICByZXR1cm4gY29tbWFuZDtcbn1cbiJdfQ==